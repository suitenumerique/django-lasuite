"""Module contains the JCOP backends for the malware detection system."""

import logging

from django.conf import settings
from django.core.files.storage import default_storage

from ..tasks.jcop import analyse_file_async
from ..utils import encrypt_message
from .base import BaseBackend

logger = logging.getLogger(__name__)


class JCOPBackend(BaseBackend):
    """A backend that uses JCOP to detect malware."""

    def __init__(
        self, base_url: str, api_key: str, callback_path: str, result_timeout: int = 30, submit_timeout: int = 10 * 60
    ):
        """Configure the JCOP backend."""
        self.base_url = base_url
        self.api_key = api_key
        self.callback_path = callback_path
        self.result_timeout = result_timeout
        self.submit_timeout = submit_timeout

        if not settings.MALWARE_DETECTION_ENCRYPTION_KEY:
            raise ValueError("MALWARE_DETECTION_ENCRYPTION_KEY settings is required.")

    def analyse_file(self, file_path: str, **kwargs) -> None:
        """Trigger a process to analyse a file using JCOP service."""
        if not default_storage.exists(file_path):
            raise FileNotFoundError(f"File {file_path} not found")

        analyse_file_async.delay(
            file_path,
            api_key=encrypt_message(self.api_key),
            base_url=self.base_url,
            callback_path=self.callback_path,
            result_timeout=self.result_timeout,
            submit_timeout=self.submit_timeout,
            **kwargs,
        )
